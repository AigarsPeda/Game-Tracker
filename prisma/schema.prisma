// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  firstName   String
  lastName    String
  Password    Password[]
  LoginToken  LoginToken[]
  email       String       @unique
  updatedAt   DateTime     @updatedAt
  createdAt   DateTime     @default(now())
  id          String       @id @default(cuid())
  Tournaments Tournament[]
}

// One user can have many Tournaments
model Tournament {
  name      String
  userId    String
  winner    String?
  teams     Participant[]
  updatedAt DateTime      @updatedAt
  createdAt DateTime      @default(now())
  id        String        @id @default(cuid())
  user      User          @relation(fields: [userId], references: [id])
  // Games     Games[]
}

// One Tournament can have many teams
// model Team {
model Participant {
  name         String
  tournamentId String
  group        String
  updatedAt    DateTime   @updatedAt
  score        Int        @default(0)
  createdAt    DateTime   @default(now())
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  // games1       Games[]    @relation(name: "team1")
  // games2       Games[]    @relation(name: "team2")
}

// Game
// winner
// Team1 = [Team, Team]
// Team2 = [Team, Team]
// tournamentId

model Games {
  id       String  @id @default(cuid())
  winnerId String?
}

// model Games {
//   team1id      String
//   team2id      String
//   tournamentId String?
//   winnerId     String?
//   score1       Int         @default(0)
//   score2       Int         @default(0)
//   id           String      @id @default(cuid())
//   Tournament   Tournament? @relation(fields: [tournamentId], references: [id])
//   team1        Team        @relation(name: "team1", fields: [team1id], references: [id])
//   team2        Team        @relation(name: "team2", fields: [team2id], references: [id])
// }

// One user can have one password
model Password {
  password String
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id])
  id       String @id @default(cuid())
}

// One user can have many login tokens
model LoginToken {
  userId    String
  token     String   @unique()
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
}
